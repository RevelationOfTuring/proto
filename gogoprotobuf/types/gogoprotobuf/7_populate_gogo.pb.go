// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: 7_populate_gogo.proto

package gogoprotobuf

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Test7 struct {
	Str                  string   `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Code                 [][]byte `protobuf:"bytes,2,rep,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test7) Reset()         { *m = Test7{} }
func (m *Test7) String() string { return proto.CompactTextString(m) }
func (*Test7) ProtoMessage()    {}
func (*Test7) Descriptor() ([]byte, []int) {
	return fileDescriptor_232b98feba897cdb, []int{0}
}
func (m *Test7) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test7.Unmarshal(m, b)
}
func (m *Test7) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test7.Marshal(b, m, deterministic)
}
func (m *Test7) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test7.Merge(m, src)
}
func (m *Test7) XXX_Size() int {
	return xxx_messageInfo_Test7.Size(m)
}
func (m *Test7) XXX_DiscardUnknown() {
	xxx_messageInfo_Test7.DiscardUnknown(m)
}

var xxx_messageInfo_Test7 proto.InternalMessageInfo

func (m *Test7) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *Test7) GetCode() [][]byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func init() {
	proto.RegisterType((*Test7)(nil), "types.Test7")
}

func init() { proto.RegisterFile("7_populate_gogo.proto", fileDescriptor_232b98feba897cdb) }

var fileDescriptor_232b98feba897cdb = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x35, 0x8f, 0x2f, 0xc8,
	0x2f, 0x28, 0xcd, 0x49, 0x2c, 0x49, 0x8d, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x96, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d,
	0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x07, 0xc9, 0xea, 0x83, 0x65, 0x93, 0x4a, 0xd3, 0xc0, 0x3c, 0x30,
	0x47, 0x1f, 0xa1, 0x4b, 0xc9, 0x98, 0x8b, 0x35, 0x24, 0xb5, 0xb8, 0xc4, 0x5c, 0x48, 0x80, 0x8b,
	0xb9, 0xb8, 0xa4, 0x48, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc4, 0x14, 0x12, 0xe2, 0x62,
	0x49, 0xce, 0x4f, 0x49, 0x95, 0x60, 0x52, 0x60, 0xd6, 0xe0, 0x09, 0x02, 0xb3, 0xad, 0x58, 0x76,
	0x2c, 0x90, 0x67, 0x74, 0x12, 0x8c, 0xe2, 0xd7, 0xd3, 0xb7, 0x86, 0x9b, 0x97, 0x54, 0x9a, 0x96,
	0xc4, 0x06, 0x66, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x37, 0xe2, 0x89, 0xb1, 0x9d, 0x00,
	0x00, 0x00,
}

func NewPopulatedTest7(r randy7PopulateGogo, easy bool) *Test7 {
	this := &Test7{}
	this.Str = string(randString7PopulateGogo(r))
	v1 := r.Intn(10)
	this.Code = make([][]byte, v1)
	for i := 0; i < v1; i++ {
		v2 := r.Intn(100)
		this.Code[i] = make([]byte, v2)
		for j := 0; j < v2; j++ {
			this.Code[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognized7PopulateGogo(r, 3)
	}
	return this
}

type randy7PopulateGogo interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8Rune7PopulateGogo(r randy7PopulateGogo) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randString7PopulateGogo(r randy7PopulateGogo) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8Rune7PopulateGogo(r)
	}
	return string(tmps)
}
func randUnrecognized7PopulateGogo(r randy7PopulateGogo, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randField7PopulateGogo(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randField7PopulateGogo(dAtA []byte, r randy7PopulateGogo, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulate7PopulateGogo(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulate7PopulateGogo(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulate7PopulateGogo(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulate7PopulateGogo(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulate7PopulateGogo(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulate7PopulateGogo(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulate7PopulateGogo(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
