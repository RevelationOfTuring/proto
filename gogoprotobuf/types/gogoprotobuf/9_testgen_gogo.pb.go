// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: 9_testgen_gogo.proto

package gogoprotobuf

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Test9 struct {
	T                    *Test9_1 `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Str                  string   `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
	Num                  float64  `protobuf:"fixed64,3,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test9) Reset()         { *m = Test9{} }
func (m *Test9) String() string { return proto.CompactTextString(m) }
func (*Test9) ProtoMessage()    {}
func (*Test9) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a6baa845a5ac675, []int{0}
}
func (m *Test9) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test9.Unmarshal(m, b)
}
func (m *Test9) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test9.Marshal(b, m, deterministic)
}
func (m *Test9) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test9.Merge(m, src)
}
func (m *Test9) XXX_Size() int {
	return xxx_messageInfo_Test9.Size(m)
}
func (m *Test9) XXX_DiscardUnknown() {
	xxx_messageInfo_Test9.DiscardUnknown(m)
}

var xxx_messageInfo_Test9 proto.InternalMessageInfo

func (m *Test9) GetT() *Test9_1 {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *Test9) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *Test9) GetNum() float64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type Test9_1 struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test9_1) Reset()         { *m = Test9_1{} }
func (m *Test9_1) String() string { return proto.CompactTextString(m) }
func (*Test9_1) ProtoMessage()    {}
func (*Test9_1) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a6baa845a5ac675, []int{1}
}
func (m *Test9_1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test9_1.Unmarshal(m, b)
}
func (m *Test9_1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test9_1.Marshal(b, m, deterministic)
}
func (m *Test9_1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test9_1.Merge(m, src)
}
func (m *Test9_1) XXX_Size() int {
	return xxx_messageInfo_Test9_1.Size(m)
}
func (m *Test9_1) XXX_DiscardUnknown() {
	xxx_messageInfo_Test9_1.DiscardUnknown(m)
}

var xxx_messageInfo_Test9_1 proto.InternalMessageInfo

func (m *Test9_1) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Test9)(nil), "types.Test9")
	proto.RegisterType((*Test9_1)(nil), "types.Test9_1")
}

func init() { proto.RegisterFile("9_testgen_gogo.proto", fileDescriptor_2a6baa845a5ac675) }

var fileDescriptor_2a6baa845a5ac675 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xb1, 0x8c, 0x2f, 0x49,
	0x2d, 0x2e, 0x49, 0x4f, 0xcd, 0x8b, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x96, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2,
	0x4b, 0xce, 0xcf, 0xd5, 0x07, 0xc9, 0xea, 0x83, 0x65, 0x93, 0x4a, 0xd3, 0xc0, 0x3c, 0x30, 0x47,
	0x1f, 0xa1, 0x4b, 0xc9, 0x93, 0x8b, 0x35, 0x24, 0xb5, 0xb8, 0xc4, 0x52, 0x48, 0x86, 0x8b, 0xb1,
	0x44, 0x82, 0x51, 0x81, 0x51, 0x83, 0xdb, 0x88, 0x4f, 0x0f, 0x6c, 0x94, 0x1e, 0x58, 0x22, 0xde,
	0x30, 0x88, 0xb1, 0x44, 0x48, 0x80, 0x8b, 0xb9, 0xb8, 0xa4, 0x48, 0x82, 0x49, 0x81, 0x51, 0x83,
	0x33, 0x08, 0xc4, 0x04, 0x89, 0xe4, 0x95, 0xe6, 0x4a, 0x30, 0x2b, 0x30, 0x6a, 0x30, 0x06, 0x81,
	0x98, 0x4a, 0xd2, 0x5c, 0xec, 0x50, 0x1d, 0x20, 0xc9, 0xdc, 0xe2, 0x74, 0xb0, 0x71, 0x9c, 0x41,
	0x20, 0xa6, 0x93, 0xe2, 0x8f, 0x87, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0xee, 0x78, 0x24, 0xc7,
	0x78, 0xe0, 0x91, 0x1c, 0x63, 0x14, 0xbf, 0x9e, 0xbe, 0x35, 0xdc, 0x49, 0x49, 0xa5, 0x69, 0x49,
	0x6c, 0x60, 0x96, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x85, 0x14, 0xfe, 0xdf, 0x00, 0x00,
	0x00,
}

func (this *Test9) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Test9)
	if !ok {
		that2, ok := that.(Test9)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.T.Equal(that1.T) {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Test9_1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Test9_1)
	if !ok {
		that2, ok := that.(Test9_1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func NewPopulatedTest9(r randy9TestgenGogo, easy bool) *Test9 {
	this := &Test9{}
	if r.Intn(5) != 0 {
		this.T = NewPopulatedTest9_1(r, easy)
	}
	this.Str = string(randString9TestgenGogo(r))
	this.Num = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognized9TestgenGogo(r, 4)
	}
	return this
}

func NewPopulatedTest9_1(r randy9TestgenGogo, easy bool) *Test9_1 {
	this := &Test9_1{}
	this.Msg = string(randString9TestgenGogo(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognized9TestgenGogo(r, 2)
	}
	return this
}

type randy9TestgenGogo interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8Rune9TestgenGogo(r randy9TestgenGogo) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randString9TestgenGogo(r randy9TestgenGogo) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8Rune9TestgenGogo(r)
	}
	return string(tmps)
}
func randUnrecognized9TestgenGogo(r randy9TestgenGogo, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randField9TestgenGogo(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randField9TestgenGogo(dAtA []byte, r randy9TestgenGogo, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulate9TestgenGogo(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulate9TestgenGogo(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulate9TestgenGogo(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulate9TestgenGogo(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulate9TestgenGogo(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulate9TestgenGogo(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulate9TestgenGogo(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
