// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: 10_marshaler_size_gogo.proto

package gogoprotobuf

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Test10 struct {
	T                    *Test10_1 `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Str                  string    `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
	Num                  float64   `protobuf:"fixed64,3,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Test10) Reset()         { *m = Test10{} }
func (m *Test10) String() string { return proto.CompactTextString(m) }
func (*Test10) ProtoMessage()    {}
func (*Test10) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0bb92ecda876973, []int{0}
}
func (m *Test10) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test10.Unmarshal(m, b)
}
func (m *Test10) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Test10.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Test10) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test10.Merge(m, src)
}
func (m *Test10) XXX_Size() int {
	return m.Size()
}
func (m *Test10) XXX_DiscardUnknown() {
	xxx_messageInfo_Test10.DiscardUnknown(m)
}

var xxx_messageInfo_Test10 proto.InternalMessageInfo

func (m *Test10) GetT() *Test10_1 {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *Test10) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *Test10) GetNum() float64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type Test10_1 struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test10_1) Reset()         { *m = Test10_1{} }
func (m *Test10_1) String() string { return proto.CompactTextString(m) }
func (*Test10_1) ProtoMessage()    {}
func (*Test10_1) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0bb92ecda876973, []int{1}
}
func (m *Test10_1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test10_1.Unmarshal(m, b)
}
func (m *Test10_1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Test10_1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Test10_1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test10_1.Merge(m, src)
}
func (m *Test10_1) XXX_Size() int {
	return m.Size()
}
func (m *Test10_1) XXX_DiscardUnknown() {
	xxx_messageInfo_Test10_1.DiscardUnknown(m)
}

var xxx_messageInfo_Test10_1 proto.InternalMessageInfo

func (m *Test10_1) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Test10)(nil), "types.Test10")
	proto.RegisterType((*Test10_1)(nil), "types.Test10_1")
}

func init() { proto.RegisterFile("10_marshaler_size_gogo.proto", fileDescriptor_f0bb92ecda876973) }

var fileDescriptor_f0bb92ecda876973 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x31, 0x34, 0x88, 0xcf,
	0x4d, 0x2c, 0x2a, 0xce, 0x48, 0xcc, 0x49, 0x2d, 0x8a, 0x2f, 0xce, 0xac, 0x4a, 0x8d, 0x4f, 0xcf,
	0x4f, 0xcf, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x96,
	0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x07, 0xc9, 0xea, 0x83,
	0x65, 0x93, 0x4a, 0xd3, 0xc0, 0x3c, 0x30, 0x47, 0x1f, 0xa1, 0x4b, 0xc9, 0x9b, 0x8b, 0x2d, 0x24,
	0xb5, 0xb8, 0xc4, 0xd0, 0x40, 0x48, 0x96, 0x8b, 0xb1, 0x44, 0x82, 0x51, 0x81, 0x51, 0x83, 0xdb,
	0x88, 0x5f, 0x0f, 0x6c, 0x96, 0x1e, 0x44, 0x26, 0xde, 0x30, 0x88, 0xb1, 0x44, 0x48, 0x80, 0x8b,
	0xb9, 0xb8, 0xa4, 0x48, 0x82, 0x49, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc4, 0x04, 0x89, 0xe4, 0x95,
	0xe6, 0x4a, 0x30, 0x2b, 0x30, 0x6a, 0x30, 0x06, 0x81, 0x98, 0x4a, 0x32, 0x5c, 0x1c, 0x30, 0x2d,
	0x20, 0xd9, 0xdc, 0xe2, 0x74, 0xb0, 0x81, 0x9c, 0x41, 0x20, 0xa6, 0x93, 0xe4, 0x89, 0x47, 0x72,
	0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x46, 0xf1, 0xeb, 0xe9, 0x5b, 0xc3, 0x5d, 0x93, 0x54, 0x9a, 0x96,
	0xc4, 0x06, 0x66, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x37, 0xcd, 0x30, 0x4c, 0xe2, 0x00,
	0x00, 0x00,
}

func (m *Test10) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Test10) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Test10) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Num != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Num))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Str) > 0 {
		i -= len(m.Str)
		copy(dAtA[i:], m.Str)
		i = encodeVarint10MarshalerSizeGogo(dAtA, i, uint64(len(m.Str)))
		i--
		dAtA[i] = 0x12
	}
	if m.T != nil {
		{
			size, err := m.T.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint10MarshalerSizeGogo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Test10_1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Test10_1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Test10_1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarint10MarshalerSizeGogo(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarint10MarshalerSizeGogo(dAtA []byte, offset int, v uint64) int {
	offset -= sov10MarshalerSizeGogo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Test10) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T != nil {
		l = m.T.Size()
		n += 1 + l + sov10MarshalerSizeGogo(uint64(l))
	}
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sov10MarshalerSizeGogo(uint64(l))
	}
	if m.Num != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Test10_1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sov10MarshalerSizeGogo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sov10MarshalerSizeGogo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func soz10MarshalerSizeGogo(x uint64) (n int) {
	return sov10MarshalerSizeGogo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
